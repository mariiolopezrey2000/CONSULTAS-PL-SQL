Entrega 3.2
START "C:\TABLAS\TABLAS.SQL";
1.	Crea un paquete que tiene las siguientes especificaciones:
1.1.	Crea una variable tabla indexada en el paquete que hace referencia a la tabla emple. (creas el tipo de dato y la variable de ese tipo de dato)
1.2.	Posteriormente crea un procedimiento: INSERTAR_EMPLE que inserta registros en la tabla física emple, y después actualiza la variable tabla colocando a este nuevo empleado. 
1.3.	Crea otro procedimiento: BORRAR_EMPLE. Este procedimiento elimina de la tabla física y de la variable tabla el empleado pasado por parámetro. Pasamos el emp_no.
1.4.	Función: BUSCAR_EMPLE: Pasamos el emp_no y nos devuelve su apellido de la variable tabla.
1.5.	Observación: Para indexar utiliza siempre el emp_no, que es un entero que nos sirve.

1.
---CREACION DE LA CABECERA DEL PAQUETE---
CREATE OR REPLACE PACKAGE EJER1_ENTREGA3_2 AS
TYPE TABLA_EMPLE IS TABLE OF EMPLE%ROWTYPE INDEX BY BINARY_INTEGER;
PROCEDURE INSERTAR_EMPLE (NU NUMBER, ape  VARCHAR2, ofi  VARCHAR2, dirN  number, fecha_a  DATE, salarI  NUMBER, comisi  NUMBER, deptar_no NUMBER);
PROCEDURE BORRAR_EMPLE (NU NUMBER);
FUNCTION BUSCAR_EMPLE (NU NUMBER) RETURN VARCHAR2;
END EJER1_ENTREGA3_2;

-----CREACION DEL CUERPO
CREATE OR REPLACE PACKAGE BODY EJER1_ENTREGA3_2 AS
V_TABLA_EMPLE TABLA_EMPLE; 

--PROCEDIMIENTO INSERTAR_EMPLE
PROCEDURE INSERTAR_EMPLE (NU NUMBER, ape  VARCHAR2, ofi  VARCHAR2, dirN  number, fecha_a  DATE, salarI  NUMBER, comisi  NUMBER, deptar_no NUMBER)
AS
BEGIN
    INSERT INTO EMPLE VALUES (NU, ape, ofi, dirN, fecha_a, salarI, comisi, deptar_no);
    SELECT * INTO V_TABLA_EMPLE(NU) FROM EMPLE WHERE EMP_NO = NU;
END INSERTAR_EMPLE;

--PROCEDIMIENTO BORRAR_EMPLE    
PROCEDURE BORRAR_EMPLE (NU NUMBER)
AS
BEGIN
    DELETE FROM EMPLE WHERE EMP_NO = NU;
    V_TABLA_EMPLE.DELETE(NU);
END BORRAR_EMPLE;

----------------FUNCIÓN BUSCAR_EMPLE
FUNCTION BUSCAR_EMPLE (NU NUMBER) RETURN VARCHAR2
AS
BEGIN
    IF(V_TABLA_EMPLE.EXISTS(NU)) THEN
        RETURN V_TABLA_EMPLE(NU).APELLIDO;
    ELSE
        RETURN 'NO EXISTE';
    END IF;
END BUSCAR_EMPLE;
END EJER1_ENTREGA3_2;
--------------------------------------------------------------------------------------------------------------------------
EXECUTE EJER1_ENTREGA3_2.INSERTAR_EMPLE(98, 'JOSE', 'DIRECTOR', 123, TO_DATE('01/01/2000', 'DD/MM/YYYY'), 1000, 100, 10);
EXECUTE EJER1_ENTREGA3_2.BORRAR_EMPLE(99);
BEGIN
    DBMS_OUTPUT.PUT_LINE(EJER1_ENTREGA3_2.BUSCAR_EMPLE(98));
END;
SELECT * FROM EMPLE;



2.	Con las tablas BANCOS, SUCURSALES, CUENTAS y MOVIMIENTOS realiza el siguiente paquete PL/SQL:
2.1.	Crea un cursor que tira de Cuentas y una variable tipo tabla como el cursor. 
vvRealiza los siguientes Procedimientos:
2.2.	CARGA_TABLA: Carga la variable tipo tabla con todas las cuentas.
2.3.	INSERTA_MOVIMIENTOS: Se insertan movimientos. 
Si existe la cuenta padre  Inserta. 
Si no existe la cuenta padre  crea la cuenta en la tabla física, actualizando la variable tipo tabla también. 
Después inserta el movimiento. 
Además actualiza el saldo_HABER de la cuenta en la tabla física. (MIRA EL PTO. 2.5) Suponemos que los movimientos son ingresos y que por lo tanto crece el saldo haber.
2.4.	BORRAR_CUENTA: Este procedimiento borra cuentas, eliminando sus movimientos y actualizando la variable tipo tabla, es decir: eliminando de aquí esa fila.
2.5.	OBSERVACIÓN 1: Inserta movimientos hace además una llamada a una función local que calcula su saldo haber. Devuelve este dato al procedimiento 2.3.
2.6.	OBSERVACIÓN 2: Decide en que procedimiento/s se debe/n realizar llamadas al procedimiento CARGA_TABLA.

-----Creacion de la cabecera del paquete
CREATE OR REPLACE PACKAGE EJER2_ENTREGA3_2 AS
TYPE TABLA_CUENTAS IS TABLE OF CUENTAS%ROWTYPE INDEX BY BINARY_INTEGER;
CURSOR C1 IS SELECT * FROM CUENTAS;
PROCEDURE CARGA_TABLA;
PROCEDURE INSERTA_MOVIMIENTOS(CODB NUMBER, CODSUC NUMBER, NUMCU NUMBER,TIPOM CHAR,IMPORTE NUMBER);
PROCEDURE BORRA_CUENTA(CODB NUMBER, CODSUC NUMBER, NUMCU NUMBER);
END EJER2_ENTREGA3_2;



-----Creacion del cuerpo del paquete
CREATE OR REPLACE PACKAGE BODY EJER2_ENTREGA3_2 AS

-----VARIABLE TIPO TABLACUENTAS
V_TABLA_CUENTAS TABLA_CUENTAS;

-----FUNCION CALCULAR SALDO_HABER
FUNCTION CALCULAR_SALDO_HABER(CODB NUMBER, CODSUC NUMBER, NUMCU NUMBER) RETURN NUMBER;
-----FUNCION CALCULAR SALDO_DEBE
FUNCTION CALCULAR_SALDO_DEBE(CODB NUMBER, CODSUC NUMBER, NUMCU NUMBER) RETURN NUMBER;
-----PROCEDIMIENTO VER VARIABLE TABLA
PROCEDURE ver_variable_tabla;

---procedimiento ver_variable_tabla(para ver el contenido de la variable--pruebas)
PROCEDURE ver_variable_tabla
AS
I NUMBER(10);
BEGIN
I:=V_TABLA_CUENTAS.FIRST;
WHILE I IS NOT NULL LOOP
DBMS_OUTPUT.PUT_LINE(V_TABLA_CUENTAS(I).NUM_CTA||' '||V_TABLA_CUENTAS(I).SALDO_DEBE||' '||V_TABLA_CUENTAS(I).SALDO_HABER);
I:=V_TABLA_CUENTAS.NEXT(I);
END LOOP;
END ver_variable_tabla;

------PROCEDIMIENTO CARGA_TABLA
PROCEDURE CARGA_TABLA
AS
BEGIN
    FOR V_REG IN C1 LOOP
        V_TABLA_CUENTAS(V_REG.NUM_CTA):= V_REG;
    END LOOP;
END CARGA_TABLA;

------FUNCION CALCULAR_SALDO_HABER
FUNCTION CALCULAR_SALDO_HABER(CODB NUMBER, CODSUC NUMBER, NUMCU NUMBER) 
RETURN NUMBER
IS
V_SALDO NUMBER;
BEGIN
    SELECT SALDO_HABER INTO V_SALDO FROM CUENTAS WHERE COD_BANCO = CODB AND COD_SUCUR = CODSUC AND NUM_CTA = NUMCU;
    RETURN V_SALDO;
END CALCULAR_SALDO_HABER;
------FUNCION CALCULAR_SALDO_DEBE
FUNCTION CALCULAR_SALDO_DEBE(CODB NUMBER, CODSUC NUMBER, NUMCU NUMBER)
RETURN NUMBER
IS
V_SALDO NUMBER;
BEGIN
    SELECT SALDO_DEBE INTO V_SALDO FROM CUENTAS WHERE COD_BANCO = CODB AND COD_SUCUR = CODSUC AND NUM_CTA = NUMCU;
    RETURN V_SALDO;
END CALCULAR_SALDO_DEBE;


---procedimiento INSERTA_MOVIMIENTOs
PROCEDURE INSERTA_MOVIMIENTOS(CODB NUMBER, CODSUC NUMBER, NUMCU NUMBER,TIPOM CHAR,IMPORTE NUMBER)
AS
V_PROVINCIA VARCHAR2(10);
V_SALDO_HABER NUMBER(20);
V_SALDO_DEBE NUMBER(20);
V_DIFERENCIA NUMBER(20);
BEGIN
    CARGA_TABLA;
    ver_variable_tabla;
    IF(V_TABLA_CUENTAS.EXISTS(NUMCU)) THEN
        INSERT INTO MOVIMIENTOS VALUES (CODB, CODSUC, NUMCU, SYSDATE, TIPOM, IMPORTE);
        V_SALDO_HABER:= CALCULAR_SALDO_HABER(CODB, CODSUC, NUMCU);
        V_SALDO_DEBE:=CALCULAR_SALDO_DEBE(CODB, CODSUC, NUMCU);
        IF TIPOM = 'I' THEN
            IF V_SALDO_DEBE =0 THEN
                V_SALDO_HABER:= V_SALDO_HABER + IMPORTE;
                UPDATE CUENTAS SET SALDO_HABER = V_SALDO_HABER WHERE COD_BANCO = CODB AND COD_SUCUR = CODSUC AND NUM_CTA = NUMCU;
            ELSE
                IF V_SALDO_DEBE>IMPORTE THEN
                    UPDATE CUENTAS SET SALDO_DEBE = V_SALDO_DEBE - IMPORTE WHERE COD_BANCO = CODB AND COD_SUCUR = CODSUC AND NUM_CTA = NUMCU;
                ELSE
                    UPDATE CUENTAS SET SALDO_HABER = IMPORTE - V_SALDO_DEBE WHERE COD_BANCO = CODB AND COD_SUCUR = CODSUC AND NUM_CTA = NUMCU;
                    UPDATE CUENTAS SET SALDO_DEBE = 0 WHERE COD_BANCO = CODB AND COD_SUCUR = CODSUC AND NUM_CTA = NUMCU;
                END IF;
            END IF;
        ELSE
            IF V_SALDO_HABER>IMPORTE THEN
                UPDATE CUENTAS SET SALDO_HABER = SALDO_HABER - IMPORTE WHERE COD_BANCO = CODB AND COD_SUCUR = CODSUC AND NUM_CTA = NUMCU;
            ELSE
                UPDATE CUENTAS SET SALDO_DEBE = ABS(SALDO_HABER-IMPORTE) WHERE COD_BANCO = CODB AND COD_SUCUR = CODSUC AND NUM_CTA = NUMCU;
                UPDATE CUENTAS SET SALDO_HABER = 0 WHERE COD_BANCO = CODB AND COD_SUCUR = CODSUC AND NUM_CTA = NUMCU;
            END IF;
        END IF;
        SELECT * INTO V_TABLA_CUENTAS(NUMCU) FROM CUENTAS WHERE COD_BANCO = CODB AND COD_SUCUR = CODSUC AND NUM_CTA = NUMCU;
    ELSE
        SELECT PROV_SUC INTO V_PROVINCIA FROM SUCURSALES WHERE COD_SUCUR = CODSUC AND COD_BANCO = CODB;
        INSERT INTO CUENTAS VALUES (CODB, CODSUC, NUMCU, SYSDATE, NULL,V_PROVINCIA,V_PROVINCIA,0,0);
        SELECT * INTO V_TABLA_CUENTAS(NUMCU) FROM CUENTAS WHERE NUM_CTA = NUMCU;
        INSERT INTO MOVIMIENTOS VALUES (CODB, CODSUC, NUMCU, SYSDATE, TIPOM, IMPORTE);
        V_SALDO_HABER:= CALCULAR_SALDO_HABER(CODB, CODSUC, NUMCU);
        IF TIPOM = 'I' THEN
            UPDATE CUENTAS SET SALDO_HABER = V_SALDO_HABER + IMPORTE WHERE COD_BANCO = CODB AND COD_SUCUR = CODSUC AND NUM_CTA = NUMCU;
        ELSE
            UPDATE CUENTAS SET SALDO_DEBE =  IMPORTE WHERE COD_BANCO = CODB AND COD_SUCUR = CODSUC AND NUM_CTA = NUMCU;
        END IF;
        SELECT * INTO V_TABLA_CUENTAS(NUMCU) FROM CUENTAS WHERE COD_BANCO = CODB AND COD_SUCUR = CODSUC AND NUM_CTA = NUMCU;
    END IF;
    ver_variable_tabla;
END INSERTA_MOVIMIENTOS;

-----PROCEDIMIENTO BORRA_CUENTA
PROCEDURE BORRA_CUENTA(CODB NUMBER, CODSUC NUMBER, NUMCU NUMBER)
AS
BEGIN
    CARGA_TABLA;
    DELETE FROM MOVIMIENTOS WHERE COD_BANCO = CODB AND COD_SUCUR = CODSUC AND NUM_CTA = NUMCU;
    DELETE FROM CUENTAS WHERE COD_BANCO = CODB AND COD_SUCUR = CODSUC AND NUM_CTA = NUMCU;
    V_TABLA_CUENTAS.DELETE(NUMCU);
    CARGA_TABLA;
END BORRA_CUENTA;
END EJER2_ENTREGA3_2;

--------------------------------------------------------------------------------------------------------------------------
EXECUTE EJER2_ENTREGA3_2.BORRA_CUENTA(1111, 5000, 1);
EXECUTE EJER2_ENTREGA3_2.INSERTA_MOVIMIENTOS(1111, 5000, 1, 'R', 5);
SELECT * FROM CUENTAS;
SELECT * FROM MOVIMIENTOS;


--------------------------------------------------------------------------------------------------------------------------
3.	Crea una vista con la siguiente información:
3.1.	Autores: nombre, apellidos, país. Libros: Título, páginas.--RELACION ENTRE ESTAS TABLAS??????
3.2.	Crea un trigger que realiza las siguientes acciones:
3.2.1.	INSERTA en la tabla hija un nuevo libro. Si no existe el autor, no inserta el libro.
3.2.2.	BORRA en la tabla hija.
3.2.3.	ACTUALIZA sólo el título y las páginas.
START "D:\Documentos\DAM\BASE-DE-DATOS\TERCER_TRIMESTRE\BBDD_3_1.SQL"
-----creacion de la vista
CREATE OR REPLACE VIEW VISTA3 AS
SELECT a.NOMBRE, A.APELLIDOS, A.PAIS, L.TITULO, L.PAGINAS
FROM AUTORES a, LIBROS l  WHERE A.COD_AUTOR = L.COD_AUTOR;

------CREACION DEL TRIGGER
CREATE OR REPLACE TRIGGER EJER3_ENTREGA3_2
INSTEAD OF DELETE OR INSERT OR UPDATE ON VISTA3
DECLARE 
V_COD_AUTOR NUMBER;
V_ULTIMAREFERE NUMBER;
BEGIN
    IF INSERTING THEN
        SELECT COD_AUTOR INTO V_COD_AUTOR FROM AUTORES WHERE NOMBRE = :NEW.NOMBRE AND APELLIDOS = :NEW.APELLIDOS;
        IF V_COD_AUTOR IS NOT NULL THEN
            SELECT MAX(REFERENCIA) INTO V_ULTIMAREFERE FROM LIBROS;
            INSERT INTO LIBROS VALUES (V_ULTIMAREFERE+1,:NEW.TITULO, :NEW.PAGINAS, V_COD_AUTOR);
        END IF;
    ELSIF DELETING THEN
        SELECT COD_AUTOR INTO V_COD_AUTOR FROM AUTORES WHERE NOMBRE = :OLD.NOMBRE AND APELLIDOS = :OLD.APELLIDOS;
        DELETE FROM LIBROS WHERE COD_AUTOR = V_COD_AUTOR AND TITULO = :OLD.TITULO;
    ELSIF UPDATING THEN
        SELECT COD_AUTOR INTO V_COD_AUTOR FROM AUTORES WHERE NOMBRE = :NEW.NOMBRE AND APELLIDOS = :NEW.APELLIDOS;
        UPDATE LIBROS SET TITULO = :NEW.TITULO, PAGINAS = :NEW.PAGINAS WHERE COD_AUTOR = V_COD_AUTOR AND TITULO = :OLD.TITULO;
    END IF;
END EJER3_ENTREGA3_2;
---------------------------------------------
INSERT INTO VISTA3 VALUES ('THOMAS', 'MANN', 'España', 'El', 100);
DELETE FROM VISTA3 WHERE TITULO = 'El Quijote' AND NOMBRE = 'THOMAS' AND APELLIDOS = 'MANN';
UPDATE VISTA3 SET TITULO = 'El Quijote', PAGINAS = 200 WHERE NOMBRE = 'ANNA' AND APELLIDOS = 'FUNDER' AND TITULO = 'STASILAND';



4.	Crea un disparador sobre la tabla libros de tal modo que:
4.1.	Si se inserta en la tabla, se guarda en otra tabla la información necesaria de qué datos se han insertado, quién lo ha hecho y la fecha.
El diseño de la tabla donde se almacena la información sobre los cambios lo debes decidir tú.
4.2.	Si se borra en la tabla, se guarda en otra tabla la información necesaria de qué datos se han insertado, quién lo ha hecho y la fecha.

---CREACION DE LAS TABLAS
CREATE TABLE LIBROS_INSERTADOS (
    TITULO VARCHAR2(30),
    PAGINAS NUMBER,
    FECHA DATE,
    USUARIO VARCHAR2(30)
);

CREATE TABLE LIBROS_BORRADOS (
    TITULO VARCHAR2(30),
    PAGINAS NUMBER,
    FECHA DATE,
    USUARIO VARCHAR2(30)
);

-----CREACION DEL DISPARADOR
CREATE OR REPLACE TRIGGER EJER4_ENTREGA3_2
BEFORE INSERT  OR DELETE ON LIBROS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO LIBROS_INSERTADOS VALUES (:NEW.TITULO, :NEW.PAGINA, SYSDATE, USER);
    ELSIF DELETING THEN
        INSERT INTO LIBROS_BORRADOS VALUES (:OLD.TITULO, :OLD.PAGINA, SYSDATE, USER);
    END IF;
END EJER4_ENTREGA3_2;

